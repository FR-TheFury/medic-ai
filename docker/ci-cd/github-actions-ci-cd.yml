
name: MSPR3 Multi-Country CI/CD Pipeline

on:
  push:
    branches: [ main, mspr3, develop ]
  pull_request:
    branches: [ main, mspr3 ]

env:
  REGISTRY: docker.io
  IMAGE_PREFIX: mspr3-health-platform

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install Python dependencies
        run: |
          cd fast-api
          pip install -r requirements.txt
          
      - name: Install Node dependencies
        run: npm install
        
      - name: Run Python tests
        run: |
          cd docker/tests
          python -m pytest integration-tests.py -v
          
      - name: Run Frontend tests
        run: npm test
        
      - name: Code Quality Analysis
        run: |
          cd docker/quality
          bash coverage.sh
          bash security-scan.sh

  build:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [frontend, backend, etl, dataviz, mysql, api-technique]
        country: [us, fr, ch]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.${{ matrix.service }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}-${{ matrix.country }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}-${{ matrix.country }}:${{ github.sha }}
          build-args: |
            COUNTRY=${{ matrix.country }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        country: [us, fr, ch]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to ${{ matrix.country }}
        run: |
          cd docker
          ./deploy.sh ${{ matrix.country }} --build
          
      - name: Health Check
        run: |
          sleep 60
          curl -f http://localhost/ || exit 1
          curl -f http://localhost:8000/health || exit 1
          curl -f http://localhost:8001/etl/health || exit 1
          
      - name: Generate Deployment Report
        run: |
          cd docker/project-management/progress-reports
          echo "## Deployment Report - $(date)" >> deployment-$(date +%Y%m%d).md
          echo "Country: ${{ matrix.country }}" >> deployment-$(date +%Y%m%d).md
          echo "Status: SUCCESS" >> deployment-$(date +%Y%m%d).md
          docker ps >> deployment-$(date +%Y%m%d).md

  security-scan:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-backend-us:latest
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
